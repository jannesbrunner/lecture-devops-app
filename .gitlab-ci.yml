stages:
  - Test and Lint
  - Build and Push
  - Staging Plan
  - Staging Apply
  - Production Plan
  - Production Apply
  - Destroy

# Stages can run following jobs concurrently

# Jobs:

Test and Lint Client:
  image: node:8.9.4
  stage: Test and Lint
  script:
    - cd ./app/client
    - npm install
    - npm run lint
    - npm run test
  cache:
    paths:
    - ./app/client/node_modules
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Lint and Test Server:
  image: node:14:16.0-buster
  stage: Test and Lint
  services:
    - name: mongo:4.2.6
      alias: todo-app-db

  variables:
    DB_PORT: 27017
    DB_HOST: todo-app-db
    MONGODB_URL: mongodb://todo-app-db:27017/todo-app
  script:
    - cd ./app/server
    - npm install
    - npm run lint
    - npm run test
  cache:
    paths:
    - ./app/server/node_modules
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Validate Terraform:
  stage: Test and Lint
  script:
    - echo "Validate Terraform"
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Build and Push:
  stage: Build and Push
  script:
  - echo "Build and Push Docker Image"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
    # We only want to Build and Push artifacts that survived test and lint stage.
    # Therefore we only Build and Push after a merge request gets merged in (commit) -> no build and push on merge request creation!

Staging Plan:
  stage: Staging Plan
  script:
    - echo "Run Terraform Plan for Staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
    # master | production -> this makes sure that staging environment (master branch)
    # will at least always have the latest validated production terraform configuration

Staging Apply:
  stage: Staging Apply
  script:
    - echo "Run Terraform Apply for Staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
    # master | production -> this makes sure that staging environment (master branch)
    # will at least always have the latest production terraform configuration applied as well

Production Plan:
  stage: Production Plan
  script:
    - echo "Run Terraform Plan for Production"
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply:
  stage: Production Apply
  script:
    - echo "Run Terraform Apply for Production"
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'

Staging Destroy:
  stage: Destroy
  script:
    - echo "Run Terraform Destroy for Staging"
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
      when: manual
      # user triggered destroy of Staging Terraform environment

Production Destroy:
  stage: Destroy
  script:
    - echo "Run Terraform Destroy for Production"
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual
      # user triggered destroy of Production Terraform environment
