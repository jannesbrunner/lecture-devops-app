image:
  name: hashicorp/terraform:0.12.21
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
    # We need to override entrypoint in order to not auto execute terraform binary

stages:
  - Test and Lint
  - Build and Push
  - Staging Plan
  - Staging Apply
  - Production Plan
  - Production Apply
  - Destroy

# Stages can run following jobs concurrently

# Jobs:

Test and Lint Client:
  image: node:8.9.4
  stage: Test and Lint
  script:
    - cd ./app/client
    - npm install
    - npm run lint
    - npm run test
  cache:
    paths:
    - ./app/client/node_modules
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Lint and Test Server:
  image: node
  stage: Test and Lint
  services:
    - name: mongo:4.2.6
      alias: todo-app-db

  variables:
    DB_PORT: 27017
    DB_HOST: todo-app-db
    DB_URL: todo-app-db:27017/todo-app
  script:
    - cd ./app/server
    - npm install
    - npm run lint
    - npm run test
  cache:
    paths:
    - ./app/server/node_modules
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Validate Terraform:
  stage: Test and Lint
  script:
    - cd deploy/
    - terraform init -backend=false
    - terraform validate
    - terraform fmt -check
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^(master|production)$/ || $CI_COMMIT_BRANCH =~ /^(master|production)$/'

Build and Push:
  image: docker:18.09.7
    # https://about.gitlab.com/blog/2019/07/31/docker-in-docker-with-docker-19-dot-03/
    # https://gitlab.com/gitlab-org/charts/gitlab/-/issues/478
  stage: Build and Push
  services:
   - docker:18.09.7-dind
  before_script:
    - docker info
  tags:
    - ownrunner
  script:
    - apk add py3-pip
    - pip3 install awscli
    - docker build --compress -t $ECR_REPO_SERVER:$CI_COMMIT_SHORT_SHA .
    - cd ./app/db
    - docker build --compress -t $ECR_REPO_DB:$CI_COMMIT_SHORT_SHA .
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - docker push $ECR_REPO_SERVER:$CI_COMMIT_SHORT_SHA
    - docker push $ECR_REPO_DB:$CI_COMMIT_SHORT_SHA
    - docker tag $ECR_REPO_SERVER:$CI_COMMIT_SHORT_SHA $ECR_REPO_SERVER:latest
    - docker tag $ECR_REPO_DB:$CI_COMMIT_SHORT_SHA $ECR_REPO_DB:latest
    - docker push $ECR_REPO_SERVER:latest
    - docker push $ECR_REPO_DB:latest

  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
    # We only want to Build and Push artifacts that survived test and lint stage.
    # Therefore we only Build and Push after a merge request gets merged in (commit) -> no build and push on merge request creation!

Staging Plan:
  stage: Staging Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_server=$ECR_REPO_SERVER:$CI_COMMIT_SHORT_SHA
    - export TF_VAR_ecr_image_db=$ECR_REPO_DB:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select staging || terraform workspace new staging
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
    # master | production -> this makes sure that staging environment (master branch)
    # will at least always have the latest validated production terraform configuration

Staging Apply:
  stage: Staging Apply
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_server=$ECR_REPO_SERVER:$CI_COMMIT_SHORT_SHA
    - export TF_VAR_ecr_image_db=$ECR_REPO_DB:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select staging
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
    # master | production -> this makes sure that staging environment (master branch)
    # will at least always have the latest production terraform configuration applied as well

Production Plan:
  stage: Production Plan
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_server=$ECR_REPO_SERVER:$CI_COMMIT_SHORT_SHA
    - export TF_VAR_ecr_image_db=$ECR_REPO_DB:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select production || terraform workspace new production
    - terraform plan
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'

Production Apply:
  stage: Production Apply
  script:
    - cd deploy/
    - export TF_VAR_ecr_image_server=$ECR_REPO_SERVER:$CI_COMMIT_SHORT_SHA
    - export TF_VAR_ecr_image_db=$ECR_REPO_DB:$CI_COMMIT_SHORT_SHA
    - terraform init
    - terraform workspace select production
    - terraform apply -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'

Staging Destroy:
  stage: Destroy
  script:
    - cd deploy/
    - terraform init
    - terraform workspace select staging
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|production)$/'
      when: manual
      # user triggered destroy of Staging Terraform environment

Production Destroy:
  stage: Destroy
  script:
    - cd deploy/
    - terraform init
    - terraform workspace select production
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_COMMIT_BRANCH == "production"'
      when: manual
      # user triggered destroy of Production Terraform environment
